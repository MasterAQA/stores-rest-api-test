{
	"info": {
		"_postman_id": "e2bf4558-5418-4338-9721-57540d3a7048",
		"name": "Stores Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24018339"
	},
	"item": [
		{
			"name": "Register and Authenticate",
			"item": [],
			"description": "Test whether a user can register and authenticate successfully."
		},
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"postman.clearEnvironmentVariable(\"access_token\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"tests[\"User created successfully.\"] = jsonData.message === 'User created successfully.'\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') ===\r",
							"'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user11\",\r\n    \"password\": \"abstc\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
							"\r",
							"tests['Status code is 200'] = responseCode.code === 200;\r",
							"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\")\r",
							"\r",
							"tests['Response was quicly, less than ~150ms'] = responseTime < 150;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user11\",\r\n    \"password\": \"abstc\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "my_item",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Store_Davinchi",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Store name is returned\"] = jsonData.name === 'Store_Davinchi';\r",
							"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 201;\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') ===\r",
							"'application/json';\r",
							"\r",
							"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/store/Store_Davinchi",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"Store_Davinchi"
					]
				}
			},
			"response": []
		},
		{
			"name": "/computer in Store_davinchi",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Item name is returned\"] = jsonData.name === 'comp';\r",
							"tests[\"Item price is returned\"] = jsonData.price === 2800.99;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 201;\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') ===\r",
							"'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price\": 2800.99,\r\n    \"store_id\": {{store_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/comp",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"comp"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Store 'Store_Davinchi' is returned\"] = jsonData.stores[0].name === 'Store_Davinchi';\r",
							"tests[\"ID of store 'Store_Davinchi' is returned\"] = jsonData.stores[0].id === parseInt(environment.\r",
							"    store_id);\r",
							"tests[\"Item 'comp' is returned inside 'Store_Davinchi'\"] = jsonData.stores[0].items[0].name === 'comp';\r",
							"tests[\"Item 'comp' price is returned inside 'Store_Davinchi'\"] = jsonData.stores[0].items[0].price === 2800.99;\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/delete computer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Message name is returned\"] == jsonData.message === 'Item deleted';\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200;\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') ===\r",
							"'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/item/comp",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"comp"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/delete Store_Davinchi",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Store name is returned\"] == jsonData.message === 'Store deleted';\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200;\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
							"\r",
							"tests[\"content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') ===\r",
							"'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/store/Store_Davinchi",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"Store_Davinchi"
					]
				}
			},
			"response": []
		}
	]
}